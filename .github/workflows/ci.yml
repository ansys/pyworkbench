name: Build and Publish ansys-workbench-core

# run only on main branch.  This avoids duplicated actions on PRs
on:
  pull_request:
  push:
    tags:
      - "*"
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  MAIN_PYTHON_VERSION: "3.10"
  PACKAGE_NAME: "ansys-workbench-core"
  PIP_EXTRA_INDEX_URL: 'https://${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }}@pkgs.dev.azure.com/pyansys/_packaging/pyansys/pypi/simple/'
  DOCUMENTATION_CNAME: 'workbench.docs.pyansys.com'

jobs:

  code-style:
    name: "Code style"
    runs-on: ubuntu-latest
    steps:
      - uses: ansys/actions/code-style@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  doc-style:
    name: "Documentation Style Check"
    runs-on: ubuntu-latest
    steps:
      - name: "Running documentation style checks"
        uses: ansys/actions/doc-style@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  doc-build:
    name: "Build documentation"
    runs-on: ubuntu-latest
    needs: [doc-style]
    steps:
      - uses: ansys/actions/doc-build@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          check-links: false

  build-wheelhouse:
    name: "Build wheelhouse for latest Python versions"
    runs-on: ${{ matrix.os }}
    strategy:
       matrix:
           os: [ubuntu-latest, windows-latest]
           python-version: ['3.8', '3.9', '3.10', '3.11']
    steps:
      - name: "Build a wheelhouse for ${{ matrix.python-version }}"
        uses: ansys/actions/build-wheelhouse@v4.1
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          operating-system: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}

  build-library:
    name: "Build library"
    runs-on: ubuntu-latest
    needs: [code-style]
    steps:
      - uses: ansys/actions/build-library@v4
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  release:
    name: Release project
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: [build-library]
    runs-on: ubuntu-latest
    steps:
      - name: Release to the private PyPI repository
        uses: ansys/actions/release-pypi-private@v4
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          twine-username: "__token__"
          twine-token: ${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }}

      - name: Release to GitHub
        uses: ansys/actions/release-github@v4
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          additional-artifacts: windows-binaries.zip linux-binaries.zip

  doc-deploy-dev:
    name: "Deploy development documentation"
    # if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: doc-build
    steps:
      - uses: ansys/actions/doc-deploy-dev@v4
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}

  doc-deploy-stable:
    name: "Deploy stable docs"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs: [release]
    steps:
      - name: Deploy the stable documentation
        uses: ansys/actions/doc-deploy-stable@v4
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
